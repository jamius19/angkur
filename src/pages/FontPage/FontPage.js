import React, {Component} from 'react';
import styles from './FontPage.module.scss';
import Navbar from "../../components/Nav/Navbar";
import LocalizedStrings from 'react-localization';
import {getRandomInt, numToBangla} from "../../utility/UtilityFunc";
import {PrismLight as SyntaxHighlighter} from "react-syntax-highlighter";
import {atomDark} from 'react-syntax-highlighter/dist/esm/styles/prism';
import ReactTooltip from 'react-tooltip';
import Language from "../../context/Language";
import Footer from "../../components/Footer/Footer";

const localization = new LocalizedStrings({
   bn: {
      chars: '‡¶¨‡¶∞‡ßç‡¶£‡¶Æ‡¶æ‡¶≤‡¶æ',
      serif: '‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§',
      sansSerif: '‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶¨‡¶ø‡¶π‡¶ø‡¶®',
      designedBy: '‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®',
      style: '‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤',
      preview: '‡¶´‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶∞‡ßÇ‡¶™',
      normal: '‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤',
      bold: '‡¶¨‡ßã‡¶≤‡ßç‡¶°',
      italic: '‡¶Ü‡¶á‡¶ü‡¶æ‡¶≤‡¶ø‡¶ï',
      fontWeightText: '‡¶´‡¶®‡ßç‡¶ü ‡¶è‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßç‡¶¨‡¶∞‡ßÇ‡¶™',
      useFont: '‡¶´‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
      allcss: '‡¶∏‡¶¨ ‡¶´‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞‡¶ü‡¶æ ‡¶ï‡ßã‡¶° ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®',
      code1: '‡¶ï‡ßã‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞',
      code2: '‡¶∏‡ßá‡¶ï‡¶∂‡¶®‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      typeface: '‡¶è‡¶∞‡¶™‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ CSS ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡¶®‡ßç‡¶ü ‡¶´‡ßá‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      dl1: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ö‡ßá ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá',
      dl2: '‡¶´‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§',
      copy: '‡¶ï‡¶™‡¶ø',
      copyConfirm: '‡¶ï‡¶™‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá!',
   },
   en: {
      chars: 'Characters',
      serif: 'Serif',
      sansSerif: 'Sans Serif',
      designedBy: 'Designed by',
      style: 'Style',
      preview: 'Font Preview',
      normal: 'Normal',
      bold: 'Bold',
      italic: 'Italic',
      fontWeightText: 'Font sample for',
      useFont: 'Getting the Font',
      allcss: 'For getting all styles in one CSS use the code below',
      code1: 'Insert the code inside your',
      code2: 'section.',
      typeface: 'Then change the default typeface in your CSS files.',
      dl1: 'You can also Download',
      dl2: 'font using the link(s) below for your device.',
      copy: 'Copy',
      copyConfirm: 'Copied!',
   },
});


const paragraph = [
   '‡¶ï‡¶¶‡¶Æ‡¶π‡¶æ‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Ø‡ßá ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶≠‡¶æ‡¶≤ ‡¶Æ‡¶®‡ßá‡¶∞ ‡¶ï‡ßü‡ßá‡¶ï‡¶ú‡¶® ‡¶ï‡ßÉ‡¶∑‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶á ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü ‡¶®‡¶ø‡¶É‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡ßá ‡¶∞‡¶´‡¶ø‡¶ï ‡¶Æ‡¶ø‡ßü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶†‡¶ø‡¶ï ‡¶§‡ßá‡¶Æ‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßü‡ßá‡¶ï‡¶ú‡¶® ‡¶ï‡ßú‡¶æ ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßá‡¶á ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü‡¶ì ‡¶â‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ, ‡¶è‡¶ï ‡¶õ‡ßá‡¶≤‡ßá ‡¶ì ‡¶¶‡ßÅ‡¶á ‡¶Æ‡ßá‡ßü‡ßá ‡¶®‡¶ø‡ßü‡ßá ‡¶â‡¶®‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶ñ‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶∏‡¶æ‡¶∞‡•§',
   '‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶´‡¶ú‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶™‡ßú‡ßá ‡¶â‡¶®‡¶ø ‡¶ó‡¶∞‡ßÅ ‡¶®‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ‡¶†‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ ‡¶â‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∞‡ßÅ‡¶ü‡¶ø‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶Æ‡¶§ ‡¶Ü‡¶ú‡¶ì ‡¶ó‡¶∞‡ßÅ ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡ßú‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶Ü‡¶ú ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ó‡¶∞‡¶Æ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡•§ ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶ï‡ßá ‡¶Ø‡ßá‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶ù‡¶ï‡¶ù‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§‡¶π‡ßü‡¶§ ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶® ‡¶Ö‡¶§‡¶ø‡¶•‡¶ø ‡¶π‡¶¨‡ßá ‡¶§‡¶æ‡¶á ‡¶¨‡¶≤‡ßá ‡¶¨‡ßá‡¶ï‡ßÅ‡¶¨‡ßá‡¶∞ ‡¶Æ‡¶§ ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ ‡¶∞‡¶æ‡¶ó‡ßá ‡¶ó‡¶ú‡¶ó‡¶ú ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶®‡¶∞‡¶ï‡¶Æ ‡¶ó‡¶∞‡ßÅ ‡¶®‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ‡¶†‡ßá ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶®‡•§',
   '‡¶Æ‡¶æ‡¶† ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶∏‡ßá ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶ó‡¶æ‡ßú‡¶ø ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú‡¶ü‡¶æ ‡¶Ü‡¶∞‡ßã ‡¶¶‡ßç‡¶¨‡¶ø‡¶ó‡ßÅ‡¶£ ‡¶¨‡¶ø‡¶ó‡ßú‡ßá ‡¶ó‡ßá‡¶≤ ‡¶∞‡¶´‡¶ø‡¶ï ‡¶Æ‡¶ø‡ßü‡¶æ‡¶∞‡•§ ‡¶Ü‡¶¨‡¶ø‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ï‡ßá ‡¶°‡¶æ‡¶ï‡¶§‡ßá ‡¶°‡¶æ‡¶ï‡¶§‡ßá ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞ ‡¶¢‡ßÅ‡¶ï‡¶≤‡ßá‡¶®‡•§ ‡¶Ü‡¶¨‡¶ø‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶π‡ßü‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡¶≤,\n-‡¶Ü‡¶¨‡ßç‡¶¨‡¶æ ‡¶ï‡¶ø ‡¶π‡¶á‡¶õ‡ßá?\n- ‡¶¶‡ßá‡¶ñ‡¶§‡ßã ‡¶¨‡¶æ‡¶™ ‡¶ï‡ßá ‡¶Ø‡ßá‡¶® ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶ó‡¶æ‡ßú‡¶ø ‡¶∞‡ßá‡¶ñ‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ü‡¶æ ‡¶ï‡¶ø ‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ú ‡¶Ø‡ßá ‡¶ó‡¶æ‡ßú‡¶ø ‡¶∞‡ßá‡¶ñ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá? ‡¶è‡¶á ‡¶¨‡¶æ‡ßú‡¶ø‡¶§‡ßá ‡¶ï‡¶ø ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ?',
];

class FontPage extends Component {

   static contextType = Language;

   state = {
      loaded: false,
      error: false,
   };

   emoji = ['ü§≤', 'ü§ó', 'üòÄ', 'ü§ò', 'üòé', 'ü§û', 'üßü‚Äç'];

   constructor(props) {
      super(props);
      this.fontName = "";
   }


   getAllStyles = () => {
      let combineString = 'https://cdn.jsdelivr.net/combine/';

      for (let i = 0; i < this.state.font.styles.length; i++) {
         let delimeter = i === 0 ? "" : ",";

         combineString += delimeter + `gh/nokshaia/angkur@latest/PublicFonts/${this.fontName}/stylesheet_${this.state.font.styles[i]}.min.css`;
      }

      return combineString;
   };

   componentDidMount() {
      this.fontName = this.props.name.replace(/ /g, "");

      //console.log(`https://cdn.jsdelivr.net/gh/nokshaia/angkur@latest/PublicFonts/${this.fontName}/info.json`);

      try {
         fetch(`https://cdn.jsdelivr.net/gh/nokshaia/angkur@latest/PublicFonts/${this.fontName}/info.json`)
             .then(value => value.json())
             .then(value => {
                //console.log(value.fonts[0]);
                this.setState({
                   loaded: true,
                   font: value.fonts[0],
                });
             });
      } catch (err) {
         this.setState({
            error: true
         })
      }
   }


   render() {
      localization.setLanguage(this.context.lang);
      let isLangEn = this.context.lang.toLowerCase() === 'en';

      return (
          <div>
             <Navbar showBG/>

             <div className={`container-c mb-5`}>

                {this.state.loaded ?
                    <div>
                       {
                          this.state.font.styles.map(value => {
                             let styleLink = `https://cdn.jsdelivr.net/gh/nokshaia/angkur@master/PublicFonts/${this.fontName}/stylesheet_${value}_DisplaySwap.min.css`;
                             return <link key={value} rel="stylesheet" href={styleLink}/>
                          })
                       }

                       <div className="row">
                          <div className="col-sm">
                             <h1 className={styles.fontTitle}>{this.state.font.name}</h1>
                             <hr className={styles.divider}/>
                          </div>
                       </div>

                       <div className="row">
                          <div className="col-sm">


                             <div className={styles.fontDetails}>
                                <i className={`fas fa-info-circle fa-fw ${styles.icons}`}/>

                                <h5>{this.state.font.type === 0 ? localization.serif : localization.sansSerif}</h5>
                                <h5>{(isLangEn ? this.state.font.styles.length : numToBangla(this.state.font.styles.length)) + (isLangEn ? " " : "") + `${localization.style}`}</h5>
                                <h5>{`${localization.designedBy} ${this.state.font.author}`}</h5>
                             </div>


                             <div className={styles.fontPreview}>
                                <i className={`fas fa-font fa-fw ${styles.icons}`}/>
                                <h2>{localization.chars}</h2>
                                <hr className={styles.divider}/>

                                <div style={{fontFamily: this.state.font.name}}>
                                   <p>
                                      ‡¶Ö ‡¶Ü ‡¶á ‡¶à ‡¶â ‡¶ä ‡¶ã ‡¶è ‡¶ê ‡¶ì ‡¶î
                                   </p>
                                   <p>
                                      ‡¶ï ‡¶ñ ‡¶ó ‡¶ò ‡¶ô ‡¶ö ‡¶õ ‡¶ú ‡¶ù ‡¶û ‡¶ü ‡¶† ‡¶° ‡¶¢ ‡¶£ ‡¶§ ‡¶• ‡¶¶ ‡¶ß ‡¶® ‡¶™ ‡¶´ ‡¶¨ ‡¶≠ ‡¶Æ ‡¶Ø ‡¶∞ ‡¶≤ ‡¶∂ ‡¶∑ ‡¶∏ ‡¶π ‡ßú ‡ßù ‡ßü ‡ßé ‡¶Ç ‡¶É ‡¶Å
                                   </p>
                                   <p>
                                      ‡ßß ‡ß® ‡ß© ‡ß™ ‡ß´ ‡ß¨ ‡ß≠ ‡ßÆ ‡ßØ ‡ß¶
                                   </p>
                                   <p>
                                      ? ! ‡•§ - ;
                                   </p>
                                </div>
                             </div>


                             <div className={styles.fontPara}>
                                <i className={`fas fa-eye fa-fw ${styles.icons}`}/>

                                <div style={{overflow: 'hidden'}}>
                                   <h2>{localization.preview}</h2>
                                   <hr className={styles.divider}/>
                                   {
                                      (() => {
                                         let paraNo = getRandomInt(0, paragraph.length - 1);

                                         return this.state.font.styles.map(value => {
                                            return (
                                                <React.Fragment key={value}>
                                                   <h4 className="font-weight-bold mb-3 mt-4">{localization[value.toLowerCase()]}</h4>
                                                   <textarea
                                                       style={{fontFamily: this.state.font.name, fontWeight: value}}
                                                       defaultValue={paragraph[paraNo]}/>
                                                </React.Fragment>
                                            );
                                         })
                                      })()
                                   }
                                </div>
                             </div>
                          </div>
                       </div>


                       <div className={styles.fontInstruction} id="getting-the-font">
                          <i className={`fas fa-cloud-download-alt fa-fw ${styles.icons}`}/>

                          <h2 className="">{localization.useFont}</h2>
                          <hr className={styles.divider}/>
                          <p className="font-weight-bold">{localization.code1}
                             <code>{"<head>"}</code> {localization.code2}
                          </p>

                          {
                             this.state.font.styles.map(value => {
                                const codeString = `<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/nokshaia/angkur@latest/PublicFonts/${this.fontName}/stylesheet_${value}.min.css"/>`;

                                return (
                                    <div className={styles.fontCopyDiv} key={value}>
                                       <p className="font-weight-bold">{localization.fontWeightText}: {localization[value.toLowerCase()]}</p>

                                       <div className={styles.codeCopy}>
                                          <button
                                              data-tip={`${localization.copyConfirm} ${this.emoji[getRandomInt(0, 6)]}`}
                                              data-event='click' data-event-off='mousemove touchstart'
                                              data-delay-hide='1000'
                                              data-for={`tool1${value}`}>
                                             <i className="far fa-copy"/> {localization.copy}
                                          </button>

                                          <ReactTooltip id={`tool1${value}`} afterShow={(event) => {
                                             copyToClipboard(codeString);
                                          }}/>


                                          <SyntaxHighlighter language='html'
                                                             style={atomDark}>{codeString}</SyntaxHighlighter>
                                       </div>
                                       <br/>
                                    </div>
                                );
                             })
                          }

                          {
                             this.state.font.styles.length === 1 ? null : (
                                 <div>

                                    <p className="font-weight-bold">{localization.allcss}</p>

                                    <div className={styles.codeCopy}>
                                       <button
                                           data-tip={`${localization.copyConfirm} ${this.emoji[getRandomInt(0, 6)]}`}
                                           data-event='click' data-event-off='mousemove touchstart'
                                           data-delay-hide='1000'
                                           data-for='tool2'>
                                          <i className="far fa-copy"/> {localization.copy}
                                       </button>

                                       <ReactTooltip id='tool2' afterShow={(event) => {
                                          copyToClipboard(`<link rel="stylesheet" href="${this.getAllStyles()}"/>`);
                                       }}/>

                                       <SyntaxHighlighter language='html' style={atomDark}>
                                          {`<link rel="stylesheet" href="${this.getAllStyles()}"/>`}
                                       </SyntaxHighlighter>
                                    </div>
                                 </div>
                             )
                          }

                          <p className=" mt-5 font-weight-bold">{localization.typeface}</p>

                          <div>

                             <div className={styles.codeCopy}>
                                <button data-tip={`${localization.copyConfirm} ${this.emoji[getRandomInt(0, 6)]}`}
                                        data-event='click'
                                        data-event-off='mousemove touchstart' data-delay-hide='1000' data-for='tool3'>
                                   <i className="far fa-copy"/> {localization.copy}
                                </button>
                                <ReactTooltip id='tool3' afterShow={(event) => {
                                   copyToClipboard(`* {\n\tfont-family: '${this.state.font.name}', ${this.state.font.type === "0" ? 'serif' : 'sans-serif'};\n}`);
                                }}/>

                                <SyntaxHighlighter language='css'
                                                   style={atomDark}>{`* {\n\tfont-family: '${this.state.font.name}', `
                                + `${this.state.font.type === "0" ? 'serif' : 'sans-serif'};\n}`}</SyntaxHighlighter>
                             </div>
                          </div>

                          <p className="mt-5">{localization.dl1}
                             <strong>{this.state.font.name}</strong> {localization.dl2}</p>
                          {
                             this.state.font.file.map((value, index) => (
                                 <React.Fragment key={value}>
                                    <a href={`https://cdn.jsdelivr.net/gh/nokshaia/angkur@latest/PublicFonts/${this.fontName}/${value}`}>
                                       <button
                                           className="btn btn-warning rounded shadow-sm rounded-pill px-4 py-2 mr-3 mt-3 mt-md-0">
                                          <strong>Download {this.fontName} {this.state.font.styles[index]}</strong>
                                       </button>
                                    </a>
                                 </React.Fragment>
                             ))
                          }
                       </div>

                    </div> : this.state.error ?
                        <h1 className="mt-5"><i className="fas fa-exclamation-triangle mr-2"/> Error Loading Font.
                           Please check the URL.</h1>
                        : <h1 className="mt-5"><i className="fas fa-spinner fa-spin mr-2"/> Loading Font Details</h1>}

             </div>

             <Footer/>
          </div>
      );
   }
}

const copyToClipboard = str => {
   const el = document.createElement('textarea');
   el.value = str;
   document.body.appendChild(el);
   el.select();
   document.execCommand('copy');
   document.body.removeChild(el);
};

export default FontPage;